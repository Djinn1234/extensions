// Matcher Code generated by go generate; DO NOT EDIT.
// This file was generated by robots at
// {{ .Timestamp }}
/*
 * File:   {{.Matchername | ToLower}}.hpp
 *
 */
{{- $entities := .CachedValues|Sort}}
{{- $matcher_name := .Matchername}}
{{- $cache_keys := .CachedValues|GetCacheKeys}}
{{- $entities_length := len $entities}}

#pragma once
#ifndef {{.Matchername|ToUpper}}_HPP
#define {{.Matchername|ToUpper}}_HPP

#include <string>
#include <cstdint>
#include <iostream>
#include <boost/algorithm/string/split.hpp>
#include <boost/algorithm/string/classification.hpp>
#include <boost/algorithm/string/case_conv.hpp>
#include <boost/lexical_cast.hpp>
#include <boost/interprocess/containers/string.hpp>
#include <boost/multi_index_container.hpp>
#include <boost/multi_index/ordered_index.hpp>
#include <boost/multi_index/member.hpp>
#include <boost/multi_index/composite_key.hpp>
#include "rtb/datacache/any_str_ops.hpp"
#include "core/tagged_tuple.hpp"

struct {{.Matchername|Title}} {
    {{range $entity := $entities -}}
    {{$entity.FieldType}} {{$entity.FieldName}};
    {{end}}
    {{.Matchername|Title}}( {{range $i,$entity := $entities}} {{$entity.FieldType}} &&{{$entity.FieldName}}{{if NotLast $i $entities}},{{end}}{{end}}) : {{range $i,$entity := $entities}}{{$entity.FieldName}}{ {{$entity.FieldName}} }{{if NotLast $i $entities}}, {{end}}{{end}}
    {}

    {{.Matchername|Title}}(): {{range $i,$entity := $entities}}{{$entity.FieldName}}{}{{if NotLast $i $entities}}, {{end}}{{end}}
    {}

    friend std::ostream &operator<<(std::ostream & os, const std::shared_ptr<{{.Matchername|Title}}> &value_ptr) {
        os << *value_ptr;
        return os;
    }
    friend std::ostream &operator<<(std::ostream & os, const {{.Matchername|Title}} &value)  {
        os
        {{- range $i,$entity := $entities -}}
           << value.{{$entity.FieldName}}{{if NotLast $i $entities}} << "|"{{end}}
        {{- end -}};
        return os;
    }
    friend std::istream &operator>>(std::istream &is, {{.Matchername|Title}} &value) {
        std::string record;
        if ( !std::getline(is, record) ){
            return is;
        }
        std::vector<std::string> fields;
        boost::split(fields, record, boost::is_any_of("\t"), boost::token_compress_on);
        if(fields.size() < {{$entities_length}} ) {
            return is;
        }
        {{range $i,$entity := $entities -}}
        value.{{$entity.FieldName}} = boost::lexical_cast<decltype(value.{{$entity.FieldName}})>(fields.at({{$i}}).begin(),fields.at({{$i}}).size());
        {{end -}}
        return is;
    }
};


namespace ipc { namespace data {

    template <typename Alloc>
    struct {{.Matchername|ToLower}}_entity {
        using char_string =  boost::interprocess::basic_string<char, std::char_traits<char>, Alloc>;

        //for tagging in multi_index_container
        struct tag {}; // search on key

        {{.Matchername|ToLower}}_entity( const Alloc & a ) : alloc{a},
        {{- range $i,$entity := $entities -}}
        {{$entity.FieldName}}
        {{- if (and (IsKey $entity) (IsIPC $entity)) -}}
        {a}
        {{- else -}}
        {}
        {{- end -}}
        {{if NotLast $i $entities}}, {{end -}}
        {{end}}
        {} //end-of-ctor

        Alloc alloc;
        {{range $entity := $entities -}}
        {{$entity.FieldTypeIPC}} {{$entity.FieldName}};
        {{end}}

        template<typename Key, typename Serializable>
        void store(Key && key, Serializable  &&data)  {
           {{range $i,$entity := $entities -}}
           {{if (and (IsKey $entity) (IsIPC $entity)) -}}
           auto value = key.template get<tag>();
           {{$entity.FieldName}} = {{$entity.FieldTypeIPC}}(value.data(), value.size(), alloc);
           {{else -}}
           {{if IsIPC $entity -}}
           {{$entity.FieldName}} = {{$entity.FieldTypeIPC}}(data.{{$entity.FieldName}}.data(), data.{{$entity.FieldName}}.size(), alloc);
           {{else -}}
           {{$entity.FieldName}} = data.{{$entity.FieldName}};
           {{end -}}
           {{end -}}
           {{end}}
        }

        template<typename Serializable>
        void retrieve(Serializable  & data) const {
           {{range $i,$entity := $entities -}}
           {{if IsIPC $entity -}}
           data.{{$entity.FieldName}} = std::move(std::string({{$entity.FieldName}}.data(), {{$entity.FieldName}}.size()));
           {{else -}}
           data.{{$entity.FieldName}} = {{$entity.FieldName}};
           {{end -}}
           {{end}}
        }
        //needed for ability to update after matching by calling index.modify(itr,entry)
        void operator()({{.Matchername|ToLower}}_entity &entry) const {
            {{range $entity := $entities -}}
            entry.{{$entity.FieldName}}={{$entity.FieldName}};
            {{end}}
        }
    };

    template<typename Alloc>
    using {{.Matchername|ToLower}}_container =
    boost::multi_index_container<
        {{.Matchername|ToLower}}_entity<Alloc>,
        boost::multi_index::indexed_by<
            boost::multi_index::ordered_unique<
                  boost::multi_index::tag<typename {{.Matchername|ToLower}}_entity<Alloc>::tag>,
                  boost::multi_index::composite_key<
                      {{.Matchername|ToLower}}_entity<Alloc>,
                      {{range $entity := $entities -}}
                      {{if IsIPC $entity -}}
                      BOOST_MULTI_INDEX_MEMBER({{$matcher_name|ToLower}}_entity<Alloc>,typename {{$matcher_name|ToLower}}_entity<Alloc>::{{$entity.FieldTypeIPC}},{{$entity.FieldName}}),
                      {{else -}}
                      BOOST_MULTI_INDEX_MEMBER({{$matcher_name|ToLower}}_entity<Alloc>,{{$entity.FieldType}},{{$entity.FieldName}})
                      {{end -}}
                      {{end -}}
                  >,
                  boost::multi_index::composite_key_compare<
                      {{range $i,$entity := $entities -}}
                      {{if IsIPC $entity -}}
                      ufw::any_str_less<Alloc>{{else -}}
                      std::less<{{$entity.FieldType}}>
                      {{end -}}
                      {{if NotLast $i $entities}} , {{end -}}
                      {{end -}}
                  >
            >
        >,
        boost::interprocess::allocator<{{.Matchername|Title}},typename Alloc::segment_manager>
    > ;
}}

template <typename Config,
          typename Memory = typename mpclmi::ipc::Shared,
          typename Alloc = typename datacache::entity_cache<Memory, ipc::data::{{.Matchername|ToLower}}_container>::char_allocator >
class {{.Matchername|Title}}Entity {
        using Cache = datacache::entity_cache<Memory, ipc::data::{{.Matchername|ToLower}}_container> ;
        using Tag = typename ipc::data::{{.Matchername|ToLower}}_entity<Alloc>::tag;
        using Keys = vanilla::tagged_tuple<NameTag, std::string>;
        using {{.Matchername|Title}}Collection = std::vector<{{.Matchername|Title}}>;
    public:
        {{.Matchername|Title}}Entity(const Config &config):
            config{config}, cache(config.data().{{.Matchername|ToLower}}_ipc_name)
        {}
        void load() noexcept(false) {
            std::ifstream in{config.data().{{.Matchername|ToLower}}_source};
            if (!in) {
                throw std::runtime_error(std::string("could not open file ") + config.data().{{.Matchername|ToLower}}_source + " exiting...");
            }
            LOG(debug) << "File opened " << config.data().{{.Matchername|ToLower}}_source;
            cache.clear();

            std::for_each(std::istream_iterator<{{.Matchername|Title}}>(in), std::istream_iterator<{{.Matchername|Title}}>(), [&](const {{.Matchername|Title}} &value){
                //using namespace boost::algorithm;
                //if(!cache.insert(Keys{to_lower_copy(value.key)}, value).second) {
                if(!cache.insert(Keys{
                {{- range $i,$key := $cache_keys -}}
                value.{{$key.FieldName}}{{if NotLast $i $cache_keys}},{{end}}
                {{- end -}}
                }, value).second) {
                    LOG(debug) << "Adding " << value << " failed!";
                } else {
                    LOG(debug) << "Adding " << value << " done!";
                }
            });
        }

        template<typename ...Args>
        bool retrieve({{.Matchername|Title}} &value, Args &&args...) {
            return cache.template retrieve<Tag>(value, std::forward<Args>(args)...);
        }

        template<typename ...Args>
        bool retrieve({{.Matchername|Title}}Collection &collection, Args &&args...) {
            auto p = cache.template retrieve_raw<Tag>(std::forward<Args>(args)...);
            auto is_found = p.first != p.second;
            collection.reserve(500); //TODO: add this number as an option in stub's object Tag
            while ( p.first != p.second ) {
                {{.Matchername|Title}} data;
                p.first->retrieve(data);
                collection.emplace_back(std::move(data));
                ++p.first;
            }
        return is_found;
        }

    private:
        const Config &config;
        Cache cache;

};

#endif /* {{.Matchername|ToUpper}}_HPP */